Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table =10000
vi. friend table = 10000
vii. hours table =10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table =10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000 (id )
ii. Hours = 2052 (hours)
iii. Category =2643 (business_id)
iv. Attribute = 1115 (business_id)
v. Review = 10000 (id)
vi. Checkin = 493 (business_id)
vii. Photo = 10000(id)
viii. Tip = 537 (user_id)
ix. User = 10000(id)
x. Friend = 11 (user_id)
xi. Elite_years = 2780 (user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	select count(*)
	from user
	where id = NULL or name = NULL or review_count = NULL or 			yelping_since = NULL or useful = NULL or funny = NULL or 		cool = NULL or fans= NULL or average_stars= NULL or 			compliment_hot= NULL or compliment_more= NULL or 			compliment_profile= NULL or compliment_cute= NULL or 			compliment_list= NULL or compliment_note= NULL or 			compliment_plain = NULL or compliment_cool= NULL or 			compliment_funny= NULL or compliment_writer= NULL or 			compliment_photos= NULL;

	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	select city, sum(review_count)
	from business
	group by city
	order by sum(review_count) desc
	
	Copy and Paste the Result Below:
	
+-----------------+-------------------+
| city            | sum(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:


select CITY,STARS,count(STARS)
from business
WHERE CITY = "Avon"
group by stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):


+------+-------+--------------+
| city | stars | count(STARS) |
+------+-------+--------------+
| Avon |   1.5 |            1 |
| Avon |   2.5 |            2 |
| Avon |   3.5 |            3 |
| Avon |   4.0 |            2 |
| Avon |   4.5 |            1 |
| Avon |   5.0 |            1 |
+-----------+-------+---------+


ii. Beachwood

SQL code used to arrive at answer:


select CITY,STARS,count(STARS)
from business
WHERE CITY = "Beachwood"
group by stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-----------+-------+--------------+
| city      | stars | count(STARS) |
+-----------+-------+--------------+
| Beachwood |   2.0 |            1 |
| Beachwood |   2.5 |            1 |
| Beachwood |   3.0 |            2 |
| Beachwood |   3.5 |            2 |
| Beachwood |   4.0 |            1 |
| Beachwood |   4.5 |            2 |
| Beachwood |   5.0 |            5 |
+-----------+-------+--------------+



7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	select name, id, review_count
	from user
	order by review_count desc
	limit 3 
		
	Copy and Paste the Result Below:
		
name   | id                     | review_count |
+--------+------------------------+--------------+
| Gerald | -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| Sara   | -3s52C4zL_DHRK0ULG6qtg |         1629 |
| Yuri   | -8lbUNlXVSoXqaRRiHiSNg |         1339 |
+--------+------------------------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
no it does not directly correlate. there is a mixed review. there are users who have very high review count but still fans are low, and vica versa is also true.
	
 name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	
	more reviews with the word "love" than "hate"
	
	SQL code used to arrive at answer:

select count(text)
from review
where text like "%love%"

+-------------+
| count(text) |
+-------------+
|        1780 |
+-------------+

select count(text)
from review
where text like "%hate%" 

+-------------+
| count(text) |
+-------------+
|         232 |
+-------------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
		select name, fans
		from user
		order by fans desc
		limit 10
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 3-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	Group 1 - having 2-3 stars- have hrs 800 to 2200 i.e. 14 hrs
	Group 2 - having 3-5 stars- are open in evening on weekdays, and early evening on weekends, 1500 to 2100 i.e 6 hrs, 1100 to 2100 i.e 10 hrs, 1800 to 	200 i.e 8 hrs, 1600 to 200 i.e 10 hrs

	group 2 which is having more starts is open for lesser timings, also it is open late at night which is their USP


ii. Do the two groups you chose to analyze have a different number of reviews?

	yes, the review count in group1 (2-3 stars) have a review count of 10), and group 2( 3-5 stars) have a review count of 15 and 26 which is higher 	than group 1         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	all of then are from different locations, so nothing could be infered from the location provided in the data


SQL code used for analysis:


	-- chosen city = Toronto , category = food
	select distinct b.name, b.city, c.category, stars,h.hours,b.review_count,
  	  	b.postal_code,b.neighborhood,
  	    case 
    	       when b.stars between 2 and 3 then "group 1"
   	       when b.stars between 3 and 5 then "group 2"
   	    end as no_of_star
    
	from business b 
	join category c 
	on b.id = c.business_id
	join hours h
	on c.business_id = h.business_id
	where c.category = "Food" and b.city ="Toronto" 
	order by stars


		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
        closed business have a review count 35361
	open business have a review count 269300

+---------+-------------------+
| is_open | sum(review_count) |
+---------+-------------------+
|       0 |             35261 |
|       1 |            269300 |
+---------+-------------------+


	thus, open busnesses have a significantly higher review count 
         
ii. Difference 2:
		no. of open businesses is much higher than closed
+---------+------------------+
| is_open | no_of_businesses |
+---------+------------------+
|       0 |             1520 |
|       1 |             8480 |
+---------+------------------+ 
6962 open business have stars from 3 to 5
whereas only 1220 closed businesses have 3 to 5 stars 

2642 open business have stars from 1 to 3
whereas only 572 closed businesses have 1 to 3 stars 
+---------+------------+------------+
| is_open | less_stars | more_stars |
+---------+------------+------------+
|       0 |        572 |       1220 |
|       1 |       2642 |       6962 |
+---------+------------+------------+



SQL code used for analysis:
 
i)
	select is_open, sum(review_count)
	from business
	group by is_open
	

ii)
select is_open,
    count(case 
            when stars between 1 and 3 then "1 to 3 stars"
        end) as less_stars,
    count(case 
            when stars between 3 and 5 then "3 to 5 stars"
          end) as more_stars
from business
group by is_open
	

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. 
These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
(1)
i. Indicate the type of analysis you chose to do:
         
	I chose to study the preference among different types of food on yelp.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
 
	I will pick several types of food including “Chinese”,”Mexican”,”Korean”,”French”,”Italian”,”Japanese” and “Indian”. Then I will analyze their star ratings and number of reviews. so that I can get some insights on which type of food is popular on yelp

The result of the analysis are as follows:
	1) the most favourite restaurant on the basis of stars in korean but it has very few reviews 
	2) there are maximum number of mexican restaurants, which too have a decent rating                    
                  

iii. Output of your finished dataset:
         
+----------+------------------+-----------+------------------+
| category | no_of_businesses | avg_stars | avg_review_count |
+----------+------------------+-----------+------------------+
| Korean   |                2 |      4.25 |             31.5 |
| French   |                2 |       4.0 |            128.5 |
| Japanese |                5 |       3.8 |             30.4 |
| Indian   |                5 |       3.6 |             12.6 |
| Italian  |                2 |       3.5 |             74.0 |
| Mexican  |                7 |       3.5 |    46.7142857143 |
| Chinese  |                4 |     3.125 |            199.0 |
+----------+------------------+-----------+------------------+

         
iv. Provide the SQL code you used to create your final dataset:


select c. category,count(b.name) as no_of_businesses, avg(b.stars) as avg_stars,avg(b.review_count) as avg_review_count
from business b join category c 
on b.id = c.business_id
where c.category in ("Chinese","Mexican","French","Italian","Korean","Japanese","Indian") 
group by c.category
order by avg_stars desc

(2)
i. Indicate the type of analysis you chose to do:
         
	Predicting the number of fans a user will have
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
 
	few points that can be useful for predicting the number of fans a user will have like the number of useful reviews, years active on yelp, whether he/she is an elite member and for how long, compliments received from users etc.

 I have used the user table and the elite_years table for my analysis. The result of the analysis are as follows:
-- 1) Being an elite member doesnot have much of an effect on the number of fans as most of the high fan user were not elite members ever.
-- 2) On an average, a user has been on yelp for 7 years.
-- 3) For fan prediction, it seems on an average each review can count towards 0.033 fans i.e. on an average one can expect 1 fan for every 30 reviews posted
-- 4) On an average, one can expect 1 fan for every 4 rating for usefulness given by users and 
-- 5)on average 1 fan for every 5.5 rating for compliment given by users         

iii. Output of your finished dataset:

in next part
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
	name,
	DATE('NOW')-yelping_since AS years_active,
	(MAX(year)-MIN(year)) AS elite_year,
	ROUND(fans*1.0/review_count,2) as fans_per_review,
	ROUND(fans*1.0/useful,2) as fans_per_useful,
	ROUND(fans*1.0/(funny+cool+compliment_hot+ compliment_more+ compliment_profile+ compliment_cute+ compliment_list + compliment_note + compliment_plain + compliment_cool + compliment_funny + compliment_writer + compliment_photos),2) AS fans_per_compliment

FROM user LEFT JOIN elite_years
ON user.id=elite_years.user_id

GROUP BY name

ORDER BY review_count DESC
LIMIT 10

+---------+--------------+------------+-----------------+-----------------+---------------------+
| name    | years_active | elite_year | fans_per_review | fans_per_useful | fans_per_compliment |
+---------+--------------+------------+-----------------+-----------------+---------------------+
| Gerald  |            8 |       None |            0.13 |            0.01 |                0.01 |
| .Hon    |           14 |       None |            0.08 |            0.01 |                0.01 |
| eric    |           13 |       None |            0.01 |            16.0 |                0.24 |
| Roanna  |           14 |       None |             0.1 |            0.03 |                0.02 |
| Ed      |           11 |          7 |            0.04 |            0.27 |                0.13 |
| Dominic |            9 |          6 |            0.04 |            0.46 |                0.13 |
| Lissa   |           13 |          8 |            0.14 |            0.26 |                0.04 |
| Alison  |           13 |       None |            0.08 |             0.2 |                0.03 |
| Sui     |           11 |       None |             0.1 |            8.67 |                0.27 |
| Crissy  |           12 |       None |            0.04 |            6.25 |                0.24 |
+---------+--------------+------------+-----------------+-----------------+---------------------+


SELECT
	AVG(DATE('NOW')-yelping_since) AS years_active,
	AVG(ROUND(fans*1.0/review_count,2)) as fans_per_review,
	AVG(ROUND(fans*1.0/useful,2)) as fans_per_useful,
	AVG(ROUND(fans*1.0/(funny+cool+compliment_hot+ compliment_more+ compliment_profile+ compliment_cute+ compliment_list + compliment_note + compliment_plain + compliment_cool + compliment_funny + compliment_writer + compliment_photos),2)) AS fans_per_compliment

FROM user;

+--------------+-----------------+-----------------+---------------------+
| years_active | fans_per_review | fans_per_useful | fans_per_compliment |
+--------------+-----------------+-----------------+---------------------+
|       7.1995 | 0.0329976979281 |  0.240480232298 |      0.179715921136 |
+--------------+-----------------+-----------------+---------------------+
